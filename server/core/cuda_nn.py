# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cudann
else:
    import _cudann

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cudann.delete_SwigPyIterator

    def value(self):
        return _cudann.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cudann.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cudann.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cudann.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cudann.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cudann.SwigPyIterator_copy(self)

    def next(self):
        return _cudann.SwigPyIterator_next(self)

    def __next__(self):
        return _cudann.SwigPyIterator___next__(self)

    def previous(self):
        return _cudann.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cudann.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cudann.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cudann.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cudann.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cudann.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cudann.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cudann.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cudann:
_cudann.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cudann.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cudann.IntVector___nonzero__(self)

    def __bool__(self):
        return _cudann.IntVector___bool__(self)

    def __len__(self):
        return _cudann.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _cudann.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cudann.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cudann.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cudann.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cudann.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cudann.IntVector___setitem__(self, *args)

    def pop(self):
        return _cudann.IntVector_pop(self)

    def append(self, x):
        return _cudann.IntVector_append(self, x)

    def empty(self):
        return _cudann.IntVector_empty(self)

    def size(self):
        return _cudann.IntVector_size(self)

    def swap(self, v):
        return _cudann.IntVector_swap(self, v)

    def begin(self):
        return _cudann.IntVector_begin(self)

    def end(self):
        return _cudann.IntVector_end(self)

    def rbegin(self):
        return _cudann.IntVector_rbegin(self)

    def rend(self):
        return _cudann.IntVector_rend(self)

    def clear(self):
        return _cudann.IntVector_clear(self)

    def get_allocator(self):
        return _cudann.IntVector_get_allocator(self)

    def pop_back(self):
        return _cudann.IntVector_pop_back(self)

    def erase(self, *args):
        return _cudann.IntVector_erase(self, *args)

    def __init__(self, *args):
        _cudann.IntVector_swiginit(self, _cudann.new_IntVector(*args))

    def push_back(self, x):
        return _cudann.IntVector_push_back(self, x)

    def front(self):
        return _cudann.IntVector_front(self)

    def back(self):
        return _cudann.IntVector_back(self)

    def assign(self, n, x):
        return _cudann.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _cudann.IntVector_resize(self, *args)

    def insert(self, *args):
        return _cudann.IntVector_insert(self, *args)

    def reserve(self, n):
        return _cudann.IntVector_reserve(self, n)

    def capacity(self):
        return _cudann.IntVector_capacity(self)
    __swig_destroy__ = _cudann.delete_IntVector

# Register IntVector in _cudann:
_cudann.IntVector_swigregister(IntVector)

class FloatTensorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cudann.FloatTensorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cudann.FloatTensorVector___nonzero__(self)

    def __bool__(self):
        return _cudann.FloatTensorVector___bool__(self)

    def __len__(self):
        return _cudann.FloatTensorVector___len__(self)

    def __getslice__(self, i, j):
        return _cudann.FloatTensorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cudann.FloatTensorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cudann.FloatTensorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cudann.FloatTensorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cudann.FloatTensorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cudann.FloatTensorVector___setitem__(self, *args)

    def pop(self):
        return _cudann.FloatTensorVector_pop(self)

    def append(self, x):
        return _cudann.FloatTensorVector_append(self, x)

    def empty(self):
        return _cudann.FloatTensorVector_empty(self)

    def size(self):
        return _cudann.FloatTensorVector_size(self)

    def swap(self, v):
        return _cudann.FloatTensorVector_swap(self, v)

    def begin(self):
        return _cudann.FloatTensorVector_begin(self)

    def end(self):
        return _cudann.FloatTensorVector_end(self)

    def rbegin(self):
        return _cudann.FloatTensorVector_rbegin(self)

    def rend(self):
        return _cudann.FloatTensorVector_rend(self)

    def clear(self):
        return _cudann.FloatTensorVector_clear(self)

    def get_allocator(self):
        return _cudann.FloatTensorVector_get_allocator(self)

    def pop_back(self):
        return _cudann.FloatTensorVector_pop_back(self)

    def erase(self, *args):
        return _cudann.FloatTensorVector_erase(self, *args)

    def __init__(self, *args):
        _cudann.FloatTensorVector_swiginit(self, _cudann.new_FloatTensorVector(*args))

    def push_back(self, x):
        return _cudann.FloatTensorVector_push_back(self, x)

    def front(self):
        return _cudann.FloatTensorVector_front(self)

    def back(self):
        return _cudann.FloatTensorVector_back(self)

    def assign(self, n, x):
        return _cudann.FloatTensorVector_assign(self, n, x)

    def resize(self, *args):
        return _cudann.FloatTensorVector_resize(self, *args)

    def insert(self, *args):
        return _cudann.FloatTensorVector_insert(self, *args)

    def reserve(self, n):
        return _cudann.FloatTensorVector_reserve(self, n)

    def capacity(self):
        return _cudann.FloatTensorVector_capacity(self)

# Register FloatTensorVector in _cudann:
_cudann.FloatTensorVector_swigregister(FloatTensorVector)

class FloatTensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cudann.FloatTensor_swiginit(self, _cudann.new_FloatTensor(*args))

    @staticmethod
    def readCSV(filename):
        return _cudann.FloatTensor_readCSV(filename)

    def Normalize(self):
        return _cudann.FloatTensor_Normalize(self)

    def multiply(self, arg2):
        return _cudann.FloatTensor_multiply(self, arg2)

    def OMPmultiply(self, arg2):
        return _cudann.FloatTensor_OMPmultiply(self, arg2)

    def elem_multiply(self, arg2):
        return _cudann.FloatTensor_elem_multiply(self, arg2)

    def scalarMultiply(self, arg2):
        return _cudann.FloatTensor_scalarMultiply(self, arg2)

    def OMPscalarMultiply(self, arg2):
        return _cudann.FloatTensor_OMPscalarMultiply(self, arg2)

    def add(self, arg2):
        return _cudann.FloatTensor_add(self, arg2)

    def OMPadd(self, arg2):
        return _cudann.FloatTensor_OMPadd(self, arg2)

    def scalarAdd(self, arg2):
        return _cudann.FloatTensor_scalarAdd(self, arg2)

    def divide(self, arg2):
        return _cudann.FloatTensor_divide(self, arg2)

    def convertFloat(self):
        return _cudann.FloatTensor_convertFloat(self)

    def flatten(self):
        return _cudann.FloatTensor_flatten(self)

    def reshape(self, arg2):
        return _cudann.FloatTensor_reshape(self, arg2)

    def sqrt(self):
        return _cudann.FloatTensor_sqrt(self)

    @staticmethod
    def randomTensor(*args):
        return _cudann.FloatTensor_randomTensor(*args)

    @staticmethod
    def randomFloatTensor(arg1):
        return _cudann.FloatTensor_randomFloatTensor(arg1)

    def row_split(self):
        return _cudann.FloatTensor_row_split(self)

    def input_output_split(self, arg2):
        return _cudann.FloatTensor_input_output_split(self, arg2)
    __swig_destroy__ = _cudann.delete_FloatTensor

    def max(self):
        return _cudann.FloatTensor_max(self)

    def argmax(self):
        return _cudann.FloatTensor_argmax(self)

    def min(self):
        return _cudann.FloatTensor_min(self)

    def argmin(self):
        return _cudann.FloatTensor_argmin(self)

    def transpose(self):
        return _cudann.FloatTensor_transpose(self)

    def OMPtranspose(self):
        return _cudann.FloatTensor_OMPtranspose(self)

    def map(self, func):
        return _cudann.FloatTensor_map(self, func)

    def copy(self):
        return _cudann.FloatTensor_copy(self)

    def __add__(self, other):
        return _cudann.FloatTensor___add__(self, other)

    def __sub__(self, other):
        return _cudann.FloatTensor___sub__(self, other)

    def __mul__(self, other):
        return _cudann.FloatTensor___mul__(self, other)

    def getSize(self):
        return _cudann.FloatTensor_getSize(self)

    def printSize(self):
        return _cudann.FloatTensor_printSize(self)

    def _print(self):
        return _cudann.FloatTensor__print(self)
    data = property(_cudann.FloatTensor_data_get, _cudann.FloatTensor_data_set)
    size = property(_cudann.FloatTensor_size_get, _cudann.FloatTensor_size_set)

# Register FloatTensor in _cudann:
_cudann.FloatTensor_swigregister(FloatTensor)

def FloatTensor_readCSV(filename):
    return _cudann.FloatTensor_readCSV(filename)

def FloatTensor_randomTensor(*args):
    return _cudann.FloatTensor_randomTensor(*args)

def FloatTensor_randomFloatTensor(arg1):
    return _cudann.FloatTensor_randomFloatTensor(arg1)

class FloatTensorPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cudann.FloatTensorPair_swiginit(self, _cudann.new_FloatTensorPair(*args))
    first = property(_cudann.FloatTensorPair_first_get, _cudann.FloatTensorPair_first_set)
    second = property(_cudann.FloatTensorPair_second_get, _cudann.FloatTensorPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _cudann.delete_FloatTensorPair

# Register FloatTensorPair in _cudann:
_cudann.FloatTensorPair_swigregister(FloatTensorPair)

class IntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cudann.IntPair_swiginit(self, _cudann.new_IntPair(*args))
    first = property(_cudann.IntPair_first_get, _cudann.IntPair_first_set)
    second = property(_cudann.IntPair_second_get, _cudann.IntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _cudann.delete_IntPair

# Register IntPair in _cudann:
_cudann.IntPair_swigregister(IntPair)

class Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def forward(self, arg2):
        return _cudann.Model_forward(self, arg2)

    def OMPforward(self, arg2):
        return _cudann.Model_OMPforward(self, arg2)

    def backward(self, arg2, arg3, arg4):
        return _cudann.Model_backward(self, arg2, arg3, arg4)

    def OMPbackward(self, arg2, arg3):
        return _cudann.Model_OMPbackward(self, arg2, arg3)

    def computeGradients(self, arg2, arg3, arg4):
        return _cudann.Model_computeGradients(self, arg2, arg3, arg4)

    def OMPcomputeGradients(self, arg2, arg3):
        return _cudann.Model_OMPcomputeGradients(self, arg2, arg3)

    def getGradients(self):
        return _cudann.Model_getGradients(self)
    __swig_destroy__ = _cudann.delete_Model

    def getParamCount(self):
        return _cudann.Model_getParamCount(self)

    def getInputSize(self):
        return _cudann.Model_getInputSize(self)

    def getOutputSize(self):
        return _cudann.Model_getOutputSize(self)
    trainable = property(_cudann.Model_trainable_get, _cudann.Model_trainable_set)
    type = property(_cudann.Model_type_get, _cudann.Model_type_set)
    isforward = property(_cudann.Model_isforward_get, _cudann.Model_isforward_set)
    weights = property(_cudann.Model_weights_get, _cudann.Model_weights_set)
    gradients = property(_cudann.Model_gradients_get, _cudann.Model_gradients_set)
    inputs = property(_cudann.Model_inputs_get, _cudann.Model_inputs_set)

# Register Model in _cudann:
_cudann.Model_swigregister(Model)

class Activation(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def forward(self, arg2):
        return _cudann.Activation_forward(self, arg2)

    def OMPforward(self, arg2):
        return _cudann.Activation_OMPforward(self, arg2)

    def getParamCount(self):
        return _cudann.Activation_getParamCount(self)

    def getInputSize(self):
        return _cudann.Activation_getInputSize(self)

    def getOutputSize(self):
        return _cudann.Activation_getOutputSize(self)
    inputSize = property(_cudann.Activation_inputSize_get, _cudann.Activation_inputSize_set)
    __swig_destroy__ = _cudann.delete_Activation

# Register Activation in _cudann:
_cudann.Activation_swigregister(Activation)

class Normalize(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inputSize):
        _cudann.Normalize_swiginit(self, _cudann.new_Normalize(inputSize))

    def getParamCount(self):
        return _cudann.Normalize_getParamCount(self)

    def getInputSize(self):
        return _cudann.Normalize_getInputSize(self)

    def getOutputSize(self):
        return _cudann.Normalize_getOutputSize(self)

    def forward(self, arg2):
        return _cudann.Normalize_forward(self, arg2)

    def OMPforward(self, arg2):
        return _cudann.Normalize_OMPforward(self, arg2)
    __swig_destroy__ = _cudann.delete_Normalize

# Register Normalize in _cudann:
_cudann.Normalize_swigregister(Normalize)

class Optimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def update_weights(self, arg2, arg3, arg4):
        return _cudann.Optimizer_update_weights(self, arg2, arg3, arg4)
    __swig_destroy__ = _cudann.delete_Optimizer

# Register Optimizer in _cudann:
_cudann.Optimizer_swigregister(Optimizer)

class Adam(Optimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lr=0.001, beta1=0.9, beta2=0.999, epsilon=1e-7):
        _cudann.Adam_swiginit(self, _cudann.new_Adam(lr, beta1, beta2, epsilon))

    def update_weights(self, arg2, arg3, arg4):
        return _cudann.Adam_update_weights(self, arg2, arg3, arg4)
    __swig_destroy__ = _cudann.delete_Adam

# Register Adam in _cudann:
_cudann.Adam_swigregister(Adam)

class Loss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def loss(self, arg2, arg3):
        return _cudann.Loss_loss(self, arg2, arg3)

    def derivative(self, arg2, arg3):
        return _cudann.Loss_derivative(self, arg2, arg3)
    __swig_destroy__ = _cudann.delete_Loss

# Register Loss in _cudann:
_cudann.Loss_swigregister(Loss)

class CrossEntropyLoss(Loss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def loss(self, prediction, actual):
        return _cudann.CrossEntropyLoss_loss(self, prediction, actual)

    def derivative(self, prediction, actual):
        return _cudann.CrossEntropyLoss_derivative(self, prediction, actual)

    def __init__(self):
        _cudann.CrossEntropyLoss_swiginit(self, _cudann.new_CrossEntropyLoss())
    __swig_destroy__ = _cudann.delete_CrossEntropyLoss

# Register CrossEntropyLoss in _cudann:
_cudann.CrossEntropyLoss_swigregister(CrossEntropyLoss)

class Pipeline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cudann.Pipeline_swiginit(self, _cudann.new_Pipeline())

    def add(self, arg2):
        return _cudann.Pipeline_add(self, arg2)

    def printPipeline(self):
        return _cudann.Pipeline_printPipeline(self)

    def backward(self, arg2, arg3, arg4):
        return _cudann.Pipeline_backward(self, arg2, arg3, arg4)

    def OMPbackward(self, arg2, arg3, arg4):
        return _cudann.Pipeline_OMPbackward(self, arg2, arg3, arg4)

    def forwardFloat(self, input):
        return _cudann.Pipeline_forwardFloat(self, input)
    __swig_destroy__ = _cudann.delete_Pipeline

# Register Pipeline in _cudann:
_cudann.Pipeline_swigregister(Pipeline)

class Flatten(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inputSize):
        _cudann.Flatten_swiginit(self, _cudann.new_Flatten(inputSize))

    def getParamCount(self):
        return _cudann.Flatten_getParamCount(self)

    def getInputSize(self):
        return _cudann.Flatten_getInputSize(self)

    def getOutputSize(self):
        return _cudann.Flatten_getOutputSize(self)

    def forward(self, arg2):
        return _cudann.Flatten_forward(self, arg2)

    def OMPforward(self, arg2):
        return _cudann.Flatten_OMPforward(self, arg2)
    __swig_destroy__ = _cudann.delete_Flatten

# Register Flatten in _cudann:
_cudann.Flatten_swigregister(Flatten)

class Relu(Activation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cudann.Relu_swiginit(self, _cudann.new_Relu(*args))

    def forward(self, arg2):
        return _cudann.Relu_forward(self, arg2)

    def OMPforward(self, arg2):
        return _cudann.Relu_OMPforward(self, arg2)
    type = property(_cudann.Relu_type_get, _cudann.Relu_type_set)
    __swig_destroy__ = _cudann.delete_Relu

# Register Relu in _cudann:
_cudann.Relu_swigregister(Relu)

class RMSProp(Optimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lr=0.001, decay_rate=0.9, epsilon=1e-7):
        _cudann.RMSProp_swiginit(self, _cudann.new_RMSProp(lr, decay_rate, epsilon))

    def update_weights(self, weights, gradient, count):
        return _cudann.RMSProp_update_weights(self, weights, gradient, count)
    __swig_destroy__ = _cudann.delete_RMSProp

# Register RMSProp in _cudann:
_cudann.RMSProp_swigregister(RMSProp)

class Linear(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inputSize, outputSize):
        _cudann.Linear_swiginit(self, _cudann.new_Linear(inputSize, outputSize))

    def getParamCount(self):
        return _cudann.Linear_getParamCount(self)

    def getInputSize(self):
        return _cudann.Linear_getInputSize(self)

    def getOutputSize(self):
        return _cudann.Linear_getOutputSize(self)

    def forward(self, arg2):
        return _cudann.Linear_forward(self, arg2)

    def OMPforward(self, arg2):
        return _cudann.Linear_OMPforward(self, arg2)

    def printWeights(self):
        return _cudann.Linear_printWeights(self)
    __swig_destroy__ = _cudann.delete_Linear

# Register Linear in _cudann:
_cudann.Linear_swigregister(Linear)

class SGD(Optimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2=1e-2, arg3=0):
        _cudann.SGD_swiginit(self, _cudann.new_SGD(arg2, arg3))

    def update_weights(self, arg2, arg3, arg4):
        return _cudann.SGD_update_weights(self, arg2, arg3, arg4)
    __swig_destroy__ = _cudann.delete_SGD

# Register SGD in _cudann:
_cudann.SGD_swigregister(SGD)

class Softmax(Activation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cudann.Softmax_swiginit(self, _cudann.new_Softmax(*args))

    def forward(self, arg2):
        return _cudann.Softmax_forward(self, arg2)

    def OMPforward(self, arg2):
        return _cudann.Softmax_OMPforward(self, arg2)
    type = property(_cudann.Softmax_type_get, _cudann.Softmax_type_set)
    __swig_destroy__ = _cudann.delete_Softmax

# Register Softmax in _cudann:
_cudann.Softmax_swigregister(Softmax)
cvar = _cudann.cvar

class MAELoss(Loss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def loss(self, arg2, arg3):
        return _cudann.MAELoss_loss(self, arg2, arg3)

    def derivative(self, arg2, arg3):
        return _cudann.MAELoss_derivative(self, arg2, arg3)

    def __init__(self):
        _cudann.MAELoss_swiginit(self, _cudann.new_MAELoss())
    __swig_destroy__ = _cudann.delete_MAELoss

# Register MAELoss in _cudann:
_cudann.MAELoss_swigregister(MAELoss)

class MSELoss(Loss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def loss(self, arg2, arg3):
        return _cudann.MSELoss_loss(self, arg2, arg3)

    def derivative(self, arg2, arg3):
        return _cudann.MSELoss_derivative(self, arg2, arg3)

    def __init__(self):
        _cudann.MSELoss_swiginit(self, _cudann.new_MSELoss())
    __swig_destroy__ = _cudann.delete_MSELoss

# Register MSELoss in _cudann:
_cudann.MSELoss_swigregister(MSELoss)



